// ===============================================
// DEV TOOLS - HERRAMIENTAS DE DESARROLLO
// ===============================================

/**
 * üîß GESTI√ìN DE BOTONES DE DESARROLLO
 * Muestra/oculta botones seg√∫n el entorno (desarrollo/producci√≥n)
 */

// Funci√≥n para mostrar/ocultar botones de desarrollo
function toggleDevButtons() {
    const isDev = window.isDevelopment;
    console.log('üîß Configurando botones de desarrollo. Entorno:', isDev ? 'DESARROLLO' : 'PRODUCCI√ìN');
    
    // Botones a controlar
    const devButtons = [
        'btnForceUpdate',
        'btnCheckUpdates'
    ];
    
    devButtons.forEach(buttonId => {
        const button = document.getElementById(buttonId);
        if (button) {
            if (isDev) {
                button.style.display = 'inline-block';
                console.log('‚úÖ Bot√≥n mostrado:', buttonId);
            } else {
                button.style.display = 'none';
                console.log('üö´ Bot√≥n ocultado:', buttonId);
            }
        } else {
            console.warn('‚ö†Ô∏è Bot√≥n no encontrado:', buttonId);
        }
    });
}

// Funci√≥n mejorada para forzar actualizaci√≥n (m√°s confiable)
function forceUpdateAppImproved() {
    console.log('üîÑ Forzando actualizaci√≥n mejorada...');
    
    try {
        // M√©todo 1: Limpiar cache del navegador
        if ('caches' in window) {
            caches.keys().then(names => {
                names.forEach(name => {
                    caches.delete(name);
                    console.log('üóëÔ∏è Cache eliminado:', name);
                });
            });
        }
        
        // M√©todo 2: Limpiar localStorage de versiones
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key && (key.includes('version') || key.includes('cache') || key.includes('update'))) {
                keysToRemove.push(key);
            }
        }
        keysToRemove.forEach(key => {
            localStorage.removeItem(key);
            console.log('üóëÔ∏è localStorage limpiado:', key);
        });
        
        // M√©todo 3: Recargar con cache busting
        const timestamp = Date.now();
        const url = new URL(window.location);
        url.searchParams.set('_t', timestamp);
        
        console.log('üîÑ Recargando p√°gina con cache busting...');
        window.location.href = url.toString();
        
    } catch (error) {
        console.error('‚ùå Error en actualizaci√≥n mejorada:', error);
        // Fallback: recarga simple
        window.location.reload(true);
    }
}

// Funci√≥n mejorada para verificar actualizaciones
function checkUpdatesFallbackImproved() {
    console.log('üîç Verificando actualizaciones mejorado...');
    
    try {
        // M√©todo 1: Usar UpdateManager si est√° disponible
        if (typeof updateManager !== 'undefined' && updateManager.forceCheck) {
            console.log('‚úÖ Usando UpdateManager');
            updateManager.forceCheck();
            return;
        }
        
        // M√©todo 2: Verificaci√≥n manual
        console.log('üîç Verificaci√≥n manual de actualizaciones...');
        
        // Limpiar cache
        if ('caches' in window) {
            caches.keys().then(names => {
                names.forEach(name => caches.delete(name));
                console.log('üóëÔ∏è Cache limpiado para verificaci√≥n');
            });
        }
        
        // Recargar p√°gina
        const timestamp = Date.now();
        const url = new URL(window.location);
        url.searchParams.set('_check', timestamp);
        
        console.log('üîÑ Recargando para verificar actualizaciones...');
        window.location.href = url.toString();
        
    } catch (error) {
        console.error('‚ùå Error en verificaci√≥n de actualizaciones:', error);
        window.location.reload(true);
    }
}

// Inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîß Inicializando herramientas de desarrollo...');
    
    // Mostrar/ocultar botones seg√∫n el entorno
    toggleDevButtons();
    
    // Reemplazar funciones globales con versiones mejoradas
    window.forceUpdateApp = forceUpdateAppImproved;
    window.checkUpdatesFallback = checkUpdatesFallbackImproved;
    
    console.log('‚úÖ Herramientas de desarrollo inicializadas');
});

// Exportar funciones para uso global
window.toggleDevButtons = toggleDevButtons;
window.forceUpdateAppImproved = forceUpdateAppImproved;
window.checkUpdatesFallbackImproved = checkUpdatesFallbackImproved;
